//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `bruce`.
    static let bruce = Rswift.ImageResource(bundle: R.hostingBundle, name: "bruce")
    /// Image `gato`.
    static let gato = Rswift.ImageResource(bundle: R.hostingBundle, name: "gato")
    /// Image `john`.
    static let john = Rswift.ImageResource(bundle: R.hostingBundle, name: "john")
    /// Image `leonardo`.
    static let leonardo = Rswift.ImageResource(bundle: R.hostingBundle, name: "leonardo")
    /// Image `samuel`.
    static let samuel = Rswift.ImageResource(bundle: R.hostingBundle, name: "samuel")
    /// Image `uma`.
    static let uma = Rswift.ImageResource(bundle: R.hostingBundle, name: "uma")
    
    /// `UIImage(named: "bruce", bundle: ..., traitCollection: ...)`
    static func bruce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bruce, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gato", bundle: ..., traitCollection: ...)`
    static func gato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gato, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "john", bundle: ..., traitCollection: ...)`
    static func john(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.john, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "leonardo", bundle: ..., traitCollection: ...)`
    static func leonardo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leonardo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "samuel", bundle: ..., traitCollection: ...)`
    static func samuel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.samuel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "uma", bundle: ..., traitCollection: ...)`
    static func uma(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uma, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ContactTableViewCell`.
    static let contactTableViewCell = _R.nib._ContactTableViewCell()
    
    /// `UINib(name: "ContactTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactTableViewCell) instead")
    static func contactTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactTableViewCell)
    }
    
    static func contactTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactTableViewCell? {
      return R.nib.contactTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactTableViewCell`.
    static let contactTableViewCell: Rswift.ReuseIdentifier<ContactTableViewCell> = Rswift.ReuseIdentifier(identifier: "ContactTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `RxSwiftStoryboard`.
    static let rxSwiftStoryboard = _R.storyboard.rxSwiftStoryboard()
    /// Storyboard `TrainingExercises`.
    static let trainingExercises = _R.storyboard.trainingExercises()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "RxSwiftStoryboard", bundle: ...)`
    static func rxSwiftStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rxSwiftStoryboard)
    }
    
    /// `UIStoryboard(name: "TrainingExercises", bundle: ...)`
    static func trainingExercises(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.trainingExercises)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.main` struct is generated, and contains static references to 9 localization keys.
    struct main {
      /// Value: App Exercícios
      static let homeViewTitle = Rswift.StringResource(key: "homeViewTitle", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Conta Criada
      static let createAccountAlertTitle = Rswift.StringResource(key: "createAccountAlertTitle", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Conta criada com sucesso.
      static let createAccountAlertMsg = Rswift.StringResource(key: "createAccountAlertMsg", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Criar Conta
      static let createAccountViewTitle = Rswift.StringResource(key: "createAccountViewTitle", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Database
      static let valetIdentifier = Rswift.StringResource(key: "valetIdentifier", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Entrar
      static let loginViewTitle = Rswift.StringResource(key: "loginViewTitle", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Usuário e/ou senha não encontrado
      static let loginViewMsg = Rswift.StringResource(key: "loginViewMsg", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: password
      static let valetPassword = Rswift.StringResource(key: "valetPassword", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: username
      static let valetUsername = Rswift.StringResource(key: "valetUsername", tableName: "main", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: App Exercícios
      static func homeViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("homeViewTitle", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Conta Criada
      static func createAccountAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("createAccountAlertTitle", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Conta criada com sucesso.
      static func createAccountAlertMsg(_: Void = ()) -> String {
        return NSLocalizedString("createAccountAlertMsg", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Criar Conta
      static func createAccountViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("createAccountViewTitle", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Database
      static func valetIdentifier(_: Void = ()) -> String {
        return NSLocalizedString("valetIdentifier", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Entrar
      static func loginViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("loginViewTitle", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Usuário e/ou senha não encontrado
      static func loginViewMsg(_: Void = ()) -> String {
        return NSLocalizedString("loginViewMsg", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: password
      static func valetPassword(_: Void = ()) -> String {
        return NSLocalizedString("valetPassword", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: username
      static func valetUsername(_: Void = ()) -> String {
        return NSLocalizedString("valetUsername", tableName: "main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ContactTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContactTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ContactTableViewCell"
      let name = "ContactTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
      try rxSwiftStoryboard.validate()
      try trainingExercises.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let accessibilityViewController = StoryboardViewControllerResource<AccessibilityViewController>(identifier: "AccessibilityViewController")
      let bundle = R.hostingBundle
      let loginKeychainViewController = StoryboardViewControllerResource<LoginKeychainViewController>(identifier: "LoginKeychainViewController")
      let name = "Main"
      let poorAccessibilityViewController = StoryboardViewControllerResource<PoorAccessibilityViewController>(identifier: "PoorAccessibilityViewController")
      let rxOperatorsExerciseViewController = StoryboardViewControllerResource<RxOperatorsExerciseViewController>(identifier: "RxOperatorsExerciseViewController")
      
      func accessibilityViewController(_: Void = ()) -> AccessibilityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: accessibilityViewController)
      }
      
      func loginKeychainViewController(_: Void = ()) -> LoginKeychainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginKeychainViewController)
      }
      
      func poorAccessibilityViewController(_: Void = ()) -> PoorAccessibilityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: poorAccessibilityViewController)
      }
      
      func rxOperatorsExerciseViewController(_: Void = ()) -> RxOperatorsExerciseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rxOperatorsExerciseViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "gato", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gato' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().accessibilityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'accessibilityViewController' could not be loaded from storyboard 'Main' as 'AccessibilityViewController'.") }
        if _R.storyboard.main().loginKeychainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginKeychainViewController' could not be loaded from storyboard 'Main' as 'LoginKeychainViewController'.") }
        if _R.storyboard.main().poorAccessibilityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'poorAccessibilityViewController' could not be loaded from storyboard 'Main' as 'PoorAccessibilityViewController'.") }
        if _R.storyboard.main().rxOperatorsExerciseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rxOperatorsExerciseViewController' could not be loaded from storyboard 'Main' as 'RxOperatorsExerciseViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct rxSwiftStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = Exemplo3
      
      let bundle = R.hostingBundle
      let name = "RxSwiftStoryboard"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct trainingExercises: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let createAccountViewController = StoryboardViewControllerResource<CreateAccountViewController>(identifier: "CreateAccountViewController")
      let homeNavViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "HomeNavViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "TrainingExercises"
      
      func createAccountViewController(_: Void = ()) -> CreateAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createAccountViewController)
      }
      
      func homeNavViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavViewController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "gato", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gato' is used in storyboard 'TrainingExercises', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.trainingExercises().createAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createAccountViewController' could not be loaded from storyboard 'TrainingExercises' as 'CreateAccountViewController'.") }
        if _R.storyboard.trainingExercises().homeNavViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavViewController' could not be loaded from storyboard 'TrainingExercises' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.trainingExercises().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'TrainingExercises' as 'HomeViewController'.") }
        if _R.storyboard.trainingExercises().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'TrainingExercises' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
